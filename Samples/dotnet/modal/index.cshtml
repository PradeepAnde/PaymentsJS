@using PayJS_Samples.Misc
@using Newtonsoft.Json;
@{
    Nonces Nonces = Shared.GetNonces();

    var request = new
    {
        merchantId = Shared.MerchantID,
        merchantKey = Shared.MerchantKEY, // don't include the Merchant Key in the JavaScript initialization!
        requestType = "payment",
        orderNumber = "Invoice" + (new Random()).Next(100).ToString(),
        amount = Shared.Amount,
        salt = Nonces.Salt,
        postbackUrl = Shared.PostbackUrl,
        preAuth = Shared.PreAuth
    };

    string jsonReq = JsonConvert.SerializeObject(request);
    string AuthKey = Shared.GetAuthKey(jsonReq, Shared.DeveloperKEY, Nonces.IV, Nonces.Salt);
}

<div class="wrapper text-center">
    <h1>Modal Dialog</h1>
    <p>When PayJS is initialized with a <code>&lt;button&gt;</code> or <code>&lt;a&gt;</code>, the UI appears over the page when that element is clicked:</p>
    <br />
    <div>
        <button class="btn btn-primary" id="paymentButton">Pay Now</button>
        <br /><br />
        <h5>Results:</h5>
        <p style="width:100%"><pre><code id="paymentResponse">The response will appear here as JSON, and in your browser console as a JavaScript object.</code></pre></p>
    </div>
</div>
<script type="text/javascript">
    // full api reference is available at https://github.com/SagePayments/PaymentsJS

    // the entire library is accessed through the PayJS() function:

    PayJS(['PayJS/UI', 'jquery'], // name the modules you want to use...
    function($UI, $) { // ... and then assign them to variables.

        // we'll start by initializing the UI:
        $UI.Initialize({
            // developer:
            clientId: "@Shared.DeveloperID",
            postbackUrl: "@request.postbackUrl", // you get a copy of the response here

            // merchant:
            merchantId: "@request.merchantId",

            // security:
            authKey: "@AuthKey",
            salt: "@request.salt",

            // request:
            requestType: "@request.requestType",
            orderNumber: "@request.orderNumber",
            amount: "@request.amount",

            // ui:
            elementId: "paymentButton", // the DOM that $UI should attach itself to,

            // dev QoL:
            // debug: true, // verbose logging
            // show: true, // show the modal immediately, instead of waiting for a click
            addFakeData: true // pre-fill the form with test values
        });

        // and then we'll set a callback function to execute after the user
        // has submitted their card data and received a respnonse back
        $UI.setCallback(function($RESP) { // the callback function receives an instance of the RESPONSE module
            console.log($RESP.getResponse());
            $("#paymentResponse").text(
                $RESP.getResponse({ "json": true })
            );
            // the response includes the gateway response, plus a SHA512 HMAC of the gateway response
            // the HMAC uses your developer key to sign the response payload
            // it's always a good idea to verify the hash, server-side, to ensure that the response is legitimate
            // this is especially important if you're changing an account balance, shipping a product, etc.
        });
    });
</script>
