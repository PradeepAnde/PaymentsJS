@using PayJS_Samples.Misc
@using Newtonsoft.Json;
@{

    // for the vault request:
    Nonces vault_Nonces = Shared.GetNonces();
    var vault_request = new
    {
        merchantId = Shared.MerchantID,
        merchantKey = Shared.MerchantKEY,
        requestType = "vault",
        orderNumber = "Invoice" + (new Random()).Next(100).ToString(),
        salt = vault_Nonces.Salt,
        postbackUrl = Shared.PostbackUrl,
    };
    string vault_jsonReq = JsonConvert.SerializeObject(vault_request);
    string vault_AuthKey = Shared.GetAuthKey(vault_jsonReq, Shared.DeveloperKEY, vault_Nonces.IV, vault_Nonces.Salt);
}

<div class="wrapper text-center">
    <h1>Tokenization</h1>
    <p>Not ready to charge a card, or expecting to charge it multiple times? Run a vault-only request to store the card, then charge it when you're ready.</p>
    <br />
    <div>
        <button class="btn btn-primary" id="vaultButton">Store Card</button>
        <button class="btn btn-warning" id="paymentButton" disabled>Charge Card</button>
        <br /><br />
        <h5>Results:</h5>
        <p style="width:100%"><pre><code id="paymentResponse">The response will appear here as JSON, and in your browser console as a JavaScript object.</code></pre></p>
    </div>
</div>

<script type="text/javascript">
    PayJS(['PayJS/Request', 'PayJS/Response', 'PayJS/Core', 'PayJS/UI', 'jquery'],
    function($REQ, $RESP, $CORE, $UI, $) {
        $UI.Initialize({
            clientId: "@Shared.DeveloperID",
            postbackUrl: "@vault_request.postbackUrl",
            merchantId: "@vault_request.merchantId",
            authKey: "@vault_AuthKey",
            salt: "@vault_request.salt",
            requestType: "@vault_request.requestType",
            orderNumber: "@vault_request.orderNumber",
            elementId: "vaultButton",
            addFakeData: true
        });
        $UI.setCallback(function(vaultResponse) {
            $("#paymentResponse").text(
                vaultResponse.getApiResponse()
            );
            if (vaultResponse.getVaultSuccess()) {
                $("#vaultButton").prop('disabled', true);
                $.get(
                    "vault/auth.cshtml",
                    {
                        token: vaultResponse.getVaultToken(),
                    },
                    function(authResp) {
                        $CORE.Initialize({
                            clientId: authResp.clientId,
                            merchantId: authResp.merch,
                            authKey: authResp.authKey,
                            requestType: "payment",
                            orderNumber: authResp.invoice,
                            amount: authResp.amount,
                            postbackUrl: authResp.postback,
                            salt: authResp.salt
                        });
                        $("#paymentButton").prop('disabled', false);
                        $("#paymentButton").click(function() {
                            $("#paymentButton").prop('disabled', true);
                            $("#paymentResponse").text("The response will appear here as JSON, and in your browser console as a JavaScript object.");
                            $REQ.doTokenPayment(vaultResponse.getVaultToken(), "123", function(paymentResponse) {
                                $RESP.tryParse(paymentResponse);
                                $("#paymentResponse").text(
                                    $RESP.getApiResponse()
                                );
                            });
                        })
                    },
                    "json"
                );
            } else {
                // ...
            }
        });
    });
</script>
